"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const create_dir_if_not_exists_1 = __importDefault(require("../lib/create-dir-if-not-exists"));
const create_file_if_not_exists_1 = __importDefault(require("../lib/create-file-if-not-exists"));
const delete_file_1 = __importDefault(require("../lib/delete-file"));
const Table_1 = require("./Table");
class Database {
    constructor(path) {
        this.path = path;
        this.tables = [];
        path !== null && path !== void 0 ? path : (path = './atlas');
        this.path = path;
        this.tablesPath = `${this.path}/tables`;
        (0, create_dir_if_not_exists_1.default)(this.path);
        (0, create_dir_if_not_exists_1.default)(this.tablesPath);
    }
    static getInstance(path) {
        if (!Database.instance) {
            Database.instance = new Database(path);
        }
        return Database.instance;
    }
    createTable(name, structure) {
        const tablePath = `${this.path}/tables/${name}.json`;
        (0, create_file_if_not_exists_1.default)(tablePath, '[]');
        const table = new Table_1.Table(name, tablePath, structure);
        this.tables.push(table);
        return table;
    }
    getTableByName(tableName) {
        const findTable = this.tables.find(table => table.name.toLowerCase() === tableName.toLowerCase());
        if (findTable)
            return findTable;
    }
    deleteTableByName(tableName) {
        const table = this.getTableByName(tableName);
        if (!table)
            return false;
        delete this.tables[this.tables.indexOf(table)];
        (0, delete_file_1.default)(table.path);
        return true;
    }
}
exports.Database = Database;
