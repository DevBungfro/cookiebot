"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const fs_1 = __importDefault(require("fs"));
const create_file_if_not_exists_1 = __importDefault(require("../lib/create-file-if-not-exists"));
const generate_data_with_save_1 = __importDefault(require("../lib/generate-data-with-save"));
const read_file_1 = __importDefault(require("../lib/read-file"));
const write_file_1 = __importDefault(require("../lib/write-file"));
class Table {
    constructor(name, path, structure) {
        this.name = name;
        this.path = path;
        this.structure = structure;
    }
    data() {
        (0, create_file_if_not_exists_1.default)(this.path, '[]');
        const data = (0, read_file_1.default)(this.path, this.structure);
        return data;
    }
    create(props) {
        if (!(props === null || props === void 0 ? void 0 : props.id))
            return null;
        const data = this.data();
        const existsIdInTable = data.find(ref => ref.id === props.id);
        if (existsIdInTable)
            return null;
        const newData = props;
        Object.entries(this.structure.defaultData).forEach(([ref, val]) => {
            if (props[ref])
                return;
            newData[ref] = val;
        });
        data.push(newData);
        (0, write_file_1.default)(this.path, data, this.structure);
        return (0, generate_data_with_save_1.default)(this.path, newData, this.structure);
    }
    get(id) {
        if (!id)
            return;
        const data = this.data().find(ref => ref.id === id);
        if (data)
            return (0, generate_data_with_save_1.default)(this.path, data, this.structure);
        return;
    }
    find(func, thisArg) {
        if (!func)
            return;
        const data = this.data().find(func);
        if (data)
            return (0, generate_data_with_save_1.default)(this.path, data, this.structure);
    }
    remove(id) {
        if (!id)
            return false;
        const reference = this.data().find(ref => ref.id == id);
        if (!reference)
            return false;
        let data = this.data();
        data.splice(data.indexOf(reference), 1);
        (0, write_file_1.default)(this.path, data, this.structure);
        return true;
    }
    clear() {
        fs_1.default.writeFileSync(this.path, '[]', 'utf-8');
        return true;
    }
}
exports.Table = Table;
