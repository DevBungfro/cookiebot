"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const read_file_1 = __importDefault(require("./read-file"));
const omit_keys_1 = __importDefault(require("./table/omit-keys"));
const pick_keys_1 = __importDefault(require("./table/pick-keys"));
const write_file_1 = __importDefault(require("./write-file"));
function generateDataWithSave(path, tableData, structure) {
    function parseToRaw(data, save) {
        const rawData = Object.assign({}, data);
        rawData === null || rawData === void 0 ? true : delete rawData.save;
        rawData === null || rawData === void 0 ? true : delete rawData.file_version;
        rawData === null || rawData === void 0 ? true : delete rawData.omit;
        rawData === null || rawData === void 0 ? true : delete rawData.pick;
        save !== null && save !== void 0 ? save : (data = rawData);
        return rawData;
    }
    return Object.assign(Object.assign({}, tableData), { omit: function (...keys) {
            return (0, omit_keys_1.default)(parseToRaw(this), keys);
        }, pick: function (...keys) {
            return (0, pick_keys_1.default)(parseToRaw(this), keys);
        }, save: function () {
            const data = (0, read_file_1.default)(path, structure);
            const previousLocalData = data.find((ref) => ref.id == this.id);
            if (!previousLocalData)
                return false;
            const localDataIndex = data.indexOf(previousLocalData);
            if (localDataIndex < 0)
                return false;
            this.file_version++;
            const rawData = parseToRaw(this, true);
            data[localDataIndex] = rawData;
            (0, write_file_1.default)(path, data, structure);
            return data;
        }, file_version: 0 });
}
exports.default = generateDataWithSave;
